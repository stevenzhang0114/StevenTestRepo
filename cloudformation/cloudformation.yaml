---
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  Environment:
    Description: Identifier for the environment (e.g. prod/test/dev1/dev2)
    Type: String

  NetworkStack:
    Description: CloudFormation stack name for the environment's network stack
    Type: String

  ManagementNetworkCidr:
    Description: IP range permitted to manage resources (e.g. RDP)
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String

  ClientNetworkCidr:
    Description: IP range permitted to access application ports
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String

  AmiId:
    Description: AMIId to use to launch instances
    Type: AWS::EC2::Image::Id

  InstanceType:
    Description: EC2 Instance type (size) to launch
    Type: String

  InstanceVolumeSize:
    Description: Size in GB of system disk
    Type: String

  TargetOu:
    Description: Active Directory Organizational Unit in which to place instances
    Type: String
  
  ServiceName:
    Description: Name of the service this infrastructure is a part of
    Type: String
  
  Application:
    Description: Component of the service that this infrastructure represents (appserver, dbserver, etc.)
    Type: String

  OwnerEmail:
    Description: Email address of the service/app owner
    Type: String
    Default: cloudops@jhg.com.au
  
  AppPackageName:
    Description: Name of nuget package created to install server application on instance(s)
    Type: String

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ AWS::StackName }-Role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::${ AWS::AccountId }:policy/AmazonEC2RoleforSSMWithoutS3"
        - !Sub "arn:aws:iam::${ AWS::AccountId }:policy/cloudwatch/cloudwatch-ec2"
        - !Sub "arn:aws:iam::${ AWS::AccountId }:policy/commvault/commvault-client-ec2"
      Policies:
        - PolicyName: allowgetparameterdomainjoin
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${ AWS::Region }:${ AWS::AccountId }:parameter/core/domain_join_account_name"
                  - !Sub "arn:aws:ssm:${ AWS::Region }:${ AWS::AccountId }:parameter/core/domain_join_account_password"
        - PolicyName: s3builddependencies
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - arn:aws:s3:::cloudops-bakery-packages/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::cloudops-bakery-packages

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ AWS::StackName }-InstanceSecurityGroup
      GroupDescription: !Sub "${ AWS::StackName }-InstanceSecurityGroup"
      VpcId:
        Fn::ImportValue: !Sub "${ NetworkStack }-id"
      Tags:
        - Key: Name
          Value: !Sub "${ AWS::StackName }-InstanceSecurityGroup"
      SecurityGroupIngress:
        # Management access over RDP
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref ManagementNetworkCidr
        #! TODO: Add any appropriate rules here for client access
        # Application access is on TCP port 5001
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          CidrIp: !Ref ClientNetworkCidr

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: true
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref InstanceVolumeSize
            VolumeType: gp2
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Sub "${ NetworkStack }-instance"
      Monitoring: true
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId:
        Fn::ImportValue: !Sub "${NetworkStack}-application-subnet-a-id"
      Tags:
        - Key: Name
          Value: !Sub "${ AWS::StackName }"
        - Key: Service
          Value: !Ref ServiceName
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref Application
        - Key: Owner
          Value: !Ref OwnerEmail
        - Key: Role
          Value: EC2
        - Key: Tenant
          Value: jhg
        - Key: "commvault:required"
          Value: "true"
      UserData:
        Fn::Base64: !Sub |
          <powershell>
            $ErrorActionPreference = "Stop"
            Start-Transcript -Path C:\user-data.log
            & "cfn-init.exe" -v `
              --stack ${AWS::StackName} `
              --resource Instance `
              --region ${AWS::Region}
            Stop-Transcript
          </powershell>
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            C:\\cfn\\scripts\\100-join-domain.ps1:
              content: !Sub |
                $ErrorActionPreference = "Stop"
                $djCreds = New-Object System.Management.Automation.PSCredential(
                  (Get-SSMParameter -Name /core/domain_join_account_name).Value,
                  ((Get-SSMParameter -Name /core/domain_join_account_password -WithDecryption $true).Value | ConvertTo-SecureString -AsPlainText -Force)
                )
                Add-Computer -Credential $djCreds -DomainName jhg.com.au -OUPath "${ TargetOu }" -Restart
            C:\\cfn\\scripts\\300-install-appbyname-from-s3.ps1:
              content: |
                Param(
                  [string]$AppName
                  )
                # Install applications via chocolatey or zip and from S3
                $VerbosePreference = "Continue"
                $now = Get-Date -Format yyyyMMddTHHmmssfff

                Function Write-Log {
                    Param(
                        [String]$Message
                    )
                    $ts = Get-Date -f u
                    Write-Output $ts + ": " $Message
                }

                Import-Module AWSPowerShell -Verbose:$false
                $BucketName = "cloudops-bakery-packages"
                $Keys = (Get-S3Object -BucketName $BucketName -Region 'ap-southeast-2' | Where-Object {$_.Key -like "*$AppName*"}).Key
                $PackagePath = "C:\Temp\Packages"

                # If object is in a folder, obtain filename
                if($Keys -like '*/*') {
                    # Get latest verison
                    $versions = @{}
                    foreach ($Key in $Keys) {
                        if($Key -like '*.nupkg') {
                            $Key -match "$AppName\.(.*)\.nupkg" | Out-Null
                        }
                        else {
                            $Key -match "$AppName\.(.*)\.zip" | Out-Null
                        }        
                        $versions += @{[System.Version]$matches[1] = $Key}
                    }
                    $Key = $versions.GetEnumerator() | Sort-Object Name | Select-Object -Last 1 -ExpandProperty Value
                    $File = $Key.Split('/')[1]
                }

                # Create package path
                New-Item -ItemType Directory -Path $PackagePath -Force

                # Download S3 object
                Read-S3Object -BucketName $BucketName -Key $Key -File "$PackagePath\$File" -Region 'ap-southeast-2'

                Start-Transcript "$env:windir\Temp\install-apps-from-s3-$now.log"

                # If application is a zip file
                if($File -like '*.zip') {
                    Write-Log "Zip file detected" 
                    
                    # Extract and install
                    New-Item -ItemType Directory -Path "$PackagePath\$AppName" -Force
                    Expand-Archive -Path "$PackagePath\$File" -DestinationPath "$PackagePath\$AppName" -Force
                    $proc = Start-Process "PowerShell.exe" -ArgumentList "-ExecutionPolicy Bypass -File `"$PackagePath\$AppName\install.ps1`"" -PassThru -Wait
                    $proc.WaitForExit()
                }

                # If application is a nuget file
                elseif($File -like '*.nupkg'){
                    Write-Log "Chocolatey package detected"
                    
                    # Install chocolatey app
                    choco.exe install $AppName --source $PackagePath --yes
                }

                Write-Log "Installation completed"
                Stop-Transcript
            C:\\cfn\\scripts\\900-finalize.ps1:
              content: !Sub |
                $ErrorActionPreference = "Stop"
                & cfn-signal.exe `
                  --success true `
                  --stack ${ AWS::StackName } `
                  --resource Instance `
                  --region ${ AWS::Region }
          commands:
            100-join-domain:
              command: 'powershell.exe -Command "C:\cfn\scripts\100-join-domain.ps1"'
              waitAfterCompletion: forever
            300-install-application:
              command: !Sub 'powershell.exe -Command "C:\cfn\scripts\300-install-appbyname-from-s3.ps1 -AppName ${ AppPackageName }"'
              waitAfterCompletion: 0
            900-finalize:
              command: 'powershell.exe -Command "C:\cfn\scripts\900-finalize.ps1"'
              waitAfterCompletion: 30

  DNS:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      TTL: "300"
      HostedZoneId:
        Fn::ImportValue: !Sub ${ NetworkStack }-subdomain-r53-id
      Name:
        Fn::Join:
          - "."
          - - !Sub "${ AWS::StackName }"
            - Fn::ImportValue: !Sub ${ NetworkStack }-subdomain
      ResourceRecords:
        - !GetAtt Instance.PrivateIp
